{"version":3,"sources":["expositores.js","horas.js","tags.js"],"names":["expostiroresInput","document","querySelector","expositores","expositoresFiltrados","listadoExpositores","expositorHidden","seleccionarExpositor","e","expositor","target","expositorPrevio","classList","remove","add","value","dataset","expositorId","async","respuesta","fetch","arrayExpositores","map","nombre","trim","apellido","id","formatearExpositores","json","obtenerExpositores","addEventListener","busqueda","length","expresion","RegExp","filter","toLowerCase","search","firstChild","removeChild","forEach","expositorHTML","createElement","textContent","onclick","appendChild","noResultados","mostrarExpositores","url","obtenerExpositor","expositorDOM","categoria","dias","querySelectorAll","inputHiddenDia","inputHiddenHora","terminoBusqueda","dia","categoria_id","Object","values","includes","buscarEventos","horaSeleccionada","seleccionarHora","iniciarApp","name","horaPrevia","resultado","eventos","listadoHoras","li","horasTomadas","evento","hora_id","listadoHorasArray","Array","from","horaId","hora","obtenerHorasDisponibles","tagsInput","tagsDiv","tagsInputHidden","tags","mostrarTags","tag","etiqueta","eliminarTag","actualizarInputHidden","toString","split","key","preventDefault"],"mappings":"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","file":"bundle.js","sourcesContent":["(function() {\r\n    // Código del módulo\r\n    const expostiroresInput = document.querySelector('#expositor');\r\n    if(expostiroresInput) {\r\n        let expositores = [];\r\n        let expositoresFiltrados = [];\r\n\r\n        const listadoExpositores = document.querySelector('#listado-expositores');\r\n        const expositorHidden = document.querySelector('[name=\"expositor_id\"]');\r\n\r\n        obtenerExpositores();\r\n        expostiroresInput.addEventListener('input', buscarExpositores);\r\n\r\n        if(expositorHidden.value) {\r\n            (async() => {\r\n                const expositor = await obtenerExpositor(expositorHidden.value);\r\n\r\n                // Insertar en el html\r\n                const expositorDOM = document.createElement('LI');\r\n                expositorDOM.classList.add('listado-expositores__expositor', 'listado-expositores__expositor--seleccionado');\r\n                expositorDOM.textContent = `${expositor.nombre} ${expositor.apellido}`;\r\n                listadoExpositores.appendChild(expositorDOM);\r\n            })();\r\n        }\r\n        \r\n        async function obtenerExpositores() {\r\n            const url = `/api/expositores`;\r\n            const respuesta = await fetch(url);\r\n            const resultado = await respuesta.json();\r\n\r\n            formatearExpositores(resultado);\r\n        }\r\n\r\n        async function obtenerExpositor(id) {\r\n            const url = `/api/expositor?id=${id}`;\r\n            const respuesta = await fetch(url);\r\n            const resultado = await respuesta.json();\r\n            return resultado;\r\n        }\r\n\r\n        function formatearExpositores(arrayExpositores = []) {\r\n            expositores = arrayExpositores.map(expositor => {\r\n                return {\r\n                    nombre: `${expositor.nombre.trim()} ${expositor.apellido.trim()}`,\r\n                    id: expositor.id\r\n                }\r\n            })\r\n        }\r\n\r\n        function buscarExpositores(e) {\r\n            const busqueda = e.target.value;\r\n\r\n            if(busqueda.length > 3) {\r\n                const expresion = new RegExp(busqueda, \"i\");\r\n                expositoresFiltrados = expositores.filter(expositor => {\r\n                    if(expositor.nombre.toLowerCase().search(expresion) !== -1) {\r\n                        return expositor;\r\n                    }\r\n                })\r\n            } else {\r\n                expositoresFiltrados = [];\r\n            }\r\n\r\n            mostrarExpositores();\r\n        }\r\n\r\n        function mostrarExpositores() {\r\n            while(listadoExpositores.firstChild) {\r\n                listadoExpositores.removeChild(listadoExpositores.firstChild);\r\n            }\r\n\r\n            if(expositoresFiltrados.length > 0) {\r\n                expositoresFiltrados.forEach(expositor => {\r\n                    const expositorHTML = document.createElement('LI');\r\n                    expositorHTML.classList.add('listado-expositores__expositor');\r\n                    expositorHTML.textContent = expositor.nombre;\r\n                    expositorHTML.dataset.expositorId = expositor.id;\r\n                    expositorHTML.onclick = seleccionarExpositor;\r\n\r\n                    // Añadir al DOM\r\n                    listadoExpositores.appendChild(expositorHTML);\r\n\r\n                })\r\n            } else {\r\n                const noResultados = document.createElement('P');\r\n                noResultados.classList.add('listado-expositores__no-resultados');\r\n                noResultados.textContent = 'No hay resultados';\r\n                listadoExpositores.appendChild(noResultados);\r\n            }\r\n\r\n   \r\n        }\r\n\r\n        function seleccionarExpositor(e) {\r\n            const expositor = e.target;\r\n\r\n            // Remover la clase previa\r\n            const expositorPrevio = document.querySelector('.listado-expositores__expositor--seleccionado');\r\n            if(expositorPrevio) {\r\n                expositorPrevio.classList.remove('listado-expositores__expositor--seleccionado');\r\n            }\r\n\r\n\r\n            expositor.classList.add('listado-expositores__expositor--seleccionado');\r\n\r\n            expositorHidden.value = expositor.dataset.expositorId;\r\n        }\r\n    }\r\n\r\n})();","(function(){\r\n    const horas = document.querySelector('#horas');\r\n\r\n    if(horas) {\r\n\r\n        const categoria = document.querySelector('[name=\"categoria_id\"]');\r\n        const dias = document.querySelectorAll('[name=\"dia\"]');\r\n        const inputHiddenDia = document.querySelector('[name=\"dia_id\"]');\r\n        const inputHiddenHora = document.querySelector('[name=\"hora_id\"]');\r\n\r\n        categoria.addEventListener('change', terminoBusqueda);\r\n        dias.forEach(dia => dia.addEventListener('change', terminoBusqueda));\r\n\r\n        let busqueda = {\r\n            categoria_id: +categoria.value || '',\r\n            dia: +inputHiddenDia.value || ''\r\n        }\r\n\r\n        if(!Object.values(busqueda).includes('')) {\r\n\r\n            async function iniciarApp() {\r\n               await buscarEventos();\r\n\r\n               const id = inputHiddenHora.value;\r\n\r\n               // Resaltar la hora actual\r\n               const horaSeleccionada = document.querySelector(`[data-hora-id=\"${id}\"]`)\r\n\r\n               horaSeleccionada.classList.remove('horas__hora--deshabilitado');\r\n               horaSeleccionada.classList.add('horas__hora--seleccionada');\r\n\r\n               horaSeleccionada.onclick = seleccionarHora;\r\n            }\r\n            \r\n            iniciarApp();\r\n        }\r\n\r\n        function terminoBusqueda(e) {\r\n            busqueda[e.target.name] = e.target.value;\r\n\r\n            // reiniciar los campos ocultos y los selectores de horas\r\n            inputHiddenHora.value = '';\r\n            inputHiddenDia.value = '';\r\n            const horaPrevia = document.querySelector('.horas__hora--seleccionada');\r\n            if(horaPrevia) {\r\n                horaPrevia.classList.remove('horas__hora--seleccionada');\r\n            }\r\n\r\n\r\n            if(Object.values(busqueda).includes('')) {\r\n                return;\r\n            }\r\n\r\n            buscarEventos();\r\n        }\r\n\r\n       async function buscarEventos() {\r\n            const { dia, categoria_id } = busqueda;\r\n            const url = `/api/eventos-horarios?dia_id=${dia}&categoria_id=${categoria_id}`;\r\n\r\n            const resultado = await fetch(url);\r\n            const eventos = await resultado.json();\r\n\r\n            obtenerHorasDisponibles(eventos);\r\n        }\r\n\r\n        function obtenerHorasDisponibles(eventos) {\r\n            // Reiniciar horas\r\n            const listadoHoras = document.querySelectorAll('#horas li');\r\n            listadoHoras.forEach(li => li.classList.add('horas__hora--deshabilitado'));\r\n\r\n            // Comprobar eventos y quitar la clase deshabilitado\r\n            const horasTomadas = eventos.map(evento => evento.hora_id);\r\n            const listadoHorasArray = Array.from(listadoHoras);\r\n            const resultado = listadoHorasArray.filter(li => !horasTomadas.includes(li.dataset.horaId));\r\n            resultado.forEach(li => li.classList.remove('horas__hora--deshabilitado'));\r\n\r\n            const horasDisponibles = document.querySelectorAll('#horas li:not(.horas__hora--deshabilitado)');\r\n            horasDisponibles.forEach(hora => hora.addEventListener('click', seleccionarHora));\r\n        }\r\n\r\n        function seleccionarHora(e) {\r\n            // Deshabilitar horas seleccionadas\r\n            const horaPrevia = document.querySelector('.horas__hora--seleccionada');\r\n            if(horaPrevia) {\r\n                horaPrevia.classList.remove('horas__hora--seleccionada');\r\n            }\r\n        \r\n\r\n            // Agregar clase de seleccionado\r\n            e.target.classList.add('horas__hora--seleccionada');\r\n            inputHiddenHora.value = e.target.dataset.horaId;\r\n\r\n            // Llenar el campo oculto del día\r\n            inputHiddenDia.value = document.querySelector('[name=\"dia\"]:checked').value;\r\n        }\r\n    }\r\n})();","(function () {\r\n    const tagsInput = document.querySelector('#tags_input');\r\n\r\n    if(tagsInput) {\r\n\r\n        const tagsDiv = document.querySelector('#tags');\r\n        const tagsInputHidden = document.querySelector('[name=\"tags\"]');\r\n\r\n        let tags = [];\r\n\r\n        // Recuperar del input oculto\r\n        if(tagsInputHidden.value !== '') {\r\n            tags = tagsInputHidden.value.split(',');\r\n            mostrarTags();\r\n        }\r\n\r\n        // Escuchar los cambios en el input\r\n        tagsInput.addEventListener('keypress', guardarTag)\r\n\r\n        function guardarTag(e) {\r\n            if(e.key === ',') { \r\n                if(e.target.value.trim() === '' || e.target.value.length < 1) {\r\n                    return;\r\n                }\r\n                e.preventDefault();\r\n                tags = [...tags, e.target.value.trim()];\r\n                tagsInput.value = '';\r\n\r\n                mostrarTags();\r\n            }\r\n        }\r\n\r\n        function mostrarTags() {\r\n            tagsDiv.textContent = '';\r\n            tags.forEach(tag => {\r\n                const etiqueta =document.createElement('LI');\r\n                etiqueta.classList.add('formulario__tag');\r\n                etiqueta.textContent = tag;\r\n                etiqueta.onclick = eliminarTag;\r\n                tagsDiv.appendChild(etiqueta);\r\n            })\r\n            actualizarInputHidden();\r\n        }\r\n\r\n        function eliminarTag(e) {\r\n            e.target.remove();\r\n            tags = tags.filter(tag => tag !== e.target.textContent);\r\n            actualizarInputHidden();\r\n        }\r\n\r\n        function actualizarInputHidden() {\r\n            tagsInputHidden.value = tags.toString();\r\n        }\r\n    }\r\n})()"]}